generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// GESTIONE UTENTI E AUTENTICAZIONE
// ================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      String   @default("USER") // USER, OPERATOR, MANAGER, ADMIN
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni per operatori
  assignedOrders     PickupOrder[] @relation("OperatorAssigned")
  operatorActivities OperatorActivity[]
  
  // AGGIUNTO: Relazioni per lavorazioni
  processingSessions ProcessingSession[] @relation("ProcessingSessionOperator")
  
  // Validazioni conferimenti
  validatedDeliveries Delivery[] @relation("DeliveryValidator")
  createdDeliveries   Delivery[] @relation("DeliveryCreator")
  
  // AGGIUNTO: Relazione per file caricati
  uploadedFiles UploadedFile[]
}

// ================================
// GESTIONE CLIENTI E BACINI (Amministrativa)
// ================================

model Client {
  id            String   @id @default(uuid())
  name          String
  vatNumber     String   @unique
  address       String?
  city          String?
  zipCode       String?
  province      String?
  phone         String?
  email         String?
  pec           String?
  contractId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relazioni amministrative
  basins        Basin[]
  pickupOrdersAsClient PickupOrder[] @relation("ClientRelation")
  deliveries    Delivery[] @relation("DeliveryClient")
}

model Basin {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  flowType    String   // A, B, C, D
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  pickupOrders PickupOrder[]
  deliveries   Delivery[]
  analyses     MerceologicalAnalysis[] @relation("AnalysisBasin")
  contributors Contributor[] // AGGIUNTO per conferitori
}

// ================================
// ENTITÃ LOGISTICHE (Separate da Clienti)
// ================================

model LogisticEntity {
  id          String   @id @default(uuid())
  name        String
  address     String?
  city        String?
  zipCode     String?
  province    String?
  phone       String?
  email       String?
  contactPerson String?
  notes       String?
  entityType  String   // SENDER, RECIPIENT, TRANSPORTER
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni logistiche
  sentOrders     PickupOrder[] @relation("LogisticSender")
  receivedOrders PickupOrder[] @relation("LogisticRecipient")
  transportedOrders PickupOrder[] @relation("LogisticTransporter")
}

// ================================
// CONFERITORI (Nuova Entità)
// ================================

model Contributor {
  id            String   @id @default(uuid())
  name          String   // Nome conferitore
  vatNumber     String?  // Partita IVA (opzionale)
  fiscalCode    String?  // Codice fiscale (opzionale)
  address       String?
  city          String?
  zipCode       String?
  province      String?
  phone         String?
  email         String?
  contactPerson String?  // Persona di riferimento
  
  // Associazione a bacino
  basinId       String?
  basin         Basin?   @relation(fields: [basinId], references: [id])
  
  // Tipologie autorizzate (JSON array)
  authorizedMaterialTypes String // JSON: ["MONO", "MULTI", "OLIO", ...]
  
  // Stato
  isActive      Boolean  @default(true)
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relazioni
  deliveries    Delivery[] @relation("ContributorDeliveries")
  
  @@index([name])
  @@index([basinId])
}

// ================================
// TIPOLOGIE MATERIALI (Nuova Entità)
// ================================

model MaterialType {
  id              String   @id @default(uuid())
  code            String   @unique // MONO, MULTI, OLIO, PLASTICA, METALLI, VETRO_SARCO
  name            String   // Nome descrittivo
  description     String?
  unit            String   @default("kg") // Unità di misura
  cerCode         String?  // Codice CER se applicabile
  reference       String?  // COREPLA, CORIPET, etc.
  color           String?  // Colore per UI (#hex)
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0) // Ordine visualizzazione
  
  // AGGIUNTO: Campo per gestione contesti di utilizzo
  usageContext    String?  // JSON array: ["CONFERIMENTI", "LAVORAZIONI_INPUT", "LAVORAZIONI_OUTPUT", "USCITE"]
  
  // Sottocategorie (per PLASTICA -> COREPET, etc.)
  parentId        String?
  parent          MaterialType? @relation("MaterialTypeHierarchy", fields: [parentId], references: [id])
  children        MaterialType[] @relation("MaterialTypeHierarchy")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relazioni esistenti
  deliveries      Delivery[] @relation("DeliveryMaterialType")
  inventories     Inventory[] @relation("InventoryMaterialType")
  
  // AGGIUNTO: Relazioni per lavorazioni
  processingInputs   ProcessingInput[]  @relation("ProcessingInputMaterial")
  processingOutputs  ProcessingOutput[] @relation("ProcessingOutputMaterial")
  processingWastes   ProcessingWaste[]  @relation("ProcessingWasteMaterial")
  
  @@index([code])
  @@index([parentId])
}

// ================================
// GESTIONE FILE UPLOAD (NUOVO)
// ================================

model UploadedFile {
  id           String   @id @default(uuid())
  filename     String   @unique
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  size         Int
  uploadPath   String   @map("upload_path")
  uploadedBy   String   @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")
  fileType     String   @default("loading-photo") @map("file_type")
  metadata     Json?

  // Relazioni
  uploader User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("uploaded_files")
  @@index([fileType])
  @@index([uploadedBy])
  @@index([createdAt])
}

// ================================
// BUONI DI RITIRO (Esteso con Workflow e Foto)
// ================================

model PickupOrder {
  id               String    @id @default(uuid())
  orderNumber      String    @unique
  issueDate        DateTime
  
  // Date del workflow
  scheduledDate    DateTime?  // Quando viene programmato
  loadingDate      DateTime?  // Data carico programmata
  unloadingDate    DateTime?  // Data scarico programmata
  completionDate   DateTime?  // Data completamento effettiva
  
  // Riferimenti Logistici (Separati)
  logisticSenderId     String?
  logisticSender       LogisticEntity? @relation(name: "LogisticSender", fields: [logisticSenderId], references: [id])
  logisticRecipientId  String?
  logisticRecipient    LogisticEntity? @relation(name: "LogisticRecipient", fields: [logisticRecipientId], references: [id])
  logisticTransporterId String?
  logisticTransporter  LogisticEntity? @relation(name: "LogisticTransporter", fields: [logisticTransporterId], references: [id])
  
  // Riferimenti Amministrativi (Manteniamo per compatibilità)
  clientId         String?
  client           Client?   @relation(name: "ClientRelation", fields: [clientId], references: [id])
  basinId          String
  basin            Basin     @relation(fields: [basinId], references: [id])
  
  // Dettagli Tecnici
  flowType         String    // A, B, C, D
  distanceKm       Float?
  materialType     String?   // Tipo materiale
  
  // Stati del Workflow
  status           String    @default("DA_EVADERE") 
  // DA_EVADERE → PROGRAMMATO → IN_EVASIONE → IN_CARICO → CARICATO → SPEDITO → COMPLETO
  
  // Quantità e Pesi
  expectedQuantity Float?    // Quantità prevista
  actualQuantity   Float?    // Quantità effettiva caricata
  destinationQuantity Float? // Quantità ricevuta a destino
  loadedPackages   Int?      // Numero colli caricati
  departureWeight  Float?    // Peso partenza (Manager)
  arrivalWeight    Float?    // Peso arrivo (Destinatario)
  
  // Gestione Operatori
  assignedOperatorId String?
  assignedOperator   User?   @relation(name: "OperatorAssigned", fields: [assignedOperatorId], references: [id])
  operatorAssignedAt DateTime?
  
  // Documenti e Media (AGGIORNATO per foto)
  notes            String?
  documents        String?   // JSON per documenti vari
  loadingPhotos    String?   @map("loading_photos") // URLs foto carico (separati da virgola)
  loadingPhotoCount Int?     @default(0) @map("loading_photo_count") // Numero foto
  loadingVideos    String?   @map("loading_videos") // JSON per video carico
  
  // Gestione Rifiuti/Respinte
  isRejected       Boolean   @default(false)
  rejectionReason  String?
  rejectionDate    DateTime?
  
  // Audit
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relazioni
  shipment         Shipment?
  activities       OperatorActivity[]
  statusHistory    PickupOrderStatusHistory[]

  // Indici per performance
  @@index([status])
  @@index([scheduledDate])
  @@index([basinId])
  @@index([assignedOperatorId])
}

// ================================
// GESTIONE SPEDIZIONI E CALENDARIO
// ================================

model Shipment {
  id              String   @id @default(uuid())
  pickupOrderId   String   @unique
  pickupOrder     PickupOrder @relation(fields: [pickupOrderId], references: [id])
  
  scheduledDate   DateTime // Data programmata
  timeSlot        String?  // Fascia oraria (es: "09:00-12:00")
  priority        String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  // Pianificazione
  estimatedDuration Int?   // Durata stimata in minuti
  specialInstructions String?
  equipmentNeeded String? // Attrezzature necessarie
  
  // Coordinate GPS (se necessario)
  pickupLatitude  Float?
  pickupLongitude Float?
  deliveryLatitude Float?
  deliveryLongitude Float?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ================================
// ATTIVITÀ OPERATORI (AGGIORNATO con foto)
// ================================

model OperatorActivity {
  id              String   @id @default(uuid())
  pickupOrderId   String
  pickupOrder     PickupOrder @relation(fields: [pickupOrderId], references: [id])
  operatorId      String
  operator        User     @relation(fields: [operatorId], references: [id])
  
  activityType    String   // ASSIGNED, STARTED, PHOTOS_UPLOADED, COMPLETED, etc.
  description     String?
  
  // Media allegati (AGGIORNATO)
  photos          String?  // JSON array di path foto
  videos          String?  // JSON array di path video
  photoCount      Int?     // Numero foto associate
  photoUrls       String?  @map("photo_urls") // URLs foto per questa attività
  
  // Dati specifici attività
  packageCount    Int?     // Numero colli (se applicabile)
  notes           String?
  
  timestamp       DateTime @default(now())
}

// ================================
// STORICO STATI BUONI DI RITIRO
// ================================

model PickupOrderStatusHistory {
  id              String   @id @default(uuid())
  pickupOrderId   String
  pickupOrder     PickupOrder @relation(fields: [pickupOrderId], references: [id])
  
  fromStatus      String?  // Stato precedente
  toStatus        String   // Nuovo stato
  changedAt       DateTime @default(now())
  changedBy       String?  // ID utente che ha fatto il cambio
  reason          String?  // Motivo del cambio
  notes           String?
  metadata        Json?    // Dati aggiuntivi (es: numero foto caricate)
}

// ================================
// GESTIONE CONFERIMENTI (AGGIORNATO)
// ================================

model Delivery {
  id              String   @id @default(uuid())
  date            DateTime // Data conferimento (solo data)
  
  // Riferimenti aggiornati
  contributorId   String   // Conferitore (obbligatorio)
  contributor     Contributor @relation(fields: [contributorId], references: [id], name: "ContributorDeliveries")
  
  materialTypeId  String   // Tipologia materiale (obbligatorio)
  materialType    MaterialType @relation(fields: [materialTypeId], references: [id], name: "DeliveryMaterialType")
  
  // Bacino derivato dal conferitore (per compatibilità)
  basinId         String?
  basin           Basin?   @relation(fields: [basinId], references: [id])
  
  // Cliente per compatibilità (deprecato)
  clientId        String?
  client          Client?  @relation(fields: [clientId], references: [id], name: "DeliveryClient")
  
  // Dettagli conferimento
  weight          Float    // Peso in kg
  unit            String   @default("kg") // Unità di misura
  
  // Documenti e tracciabilità
  documentNumber  String?  // Numero documento di trasporto
  vehiclePlate    String?  // Targa mezzo
  driverName      String?  // Nome autista
  
  // Qualità e note
  quality         String?  // Qualità materiale (OTTIMA, BUONA, SCARSA)
  moistureLevel   String?  // Livello umidità (BASSO, MEDIO, ALTO)
  contaminationLevel String? // Livello contaminazione
  
  // Documenti digitali
  documents       String?  // JSON per documenti allegati
  photos          String?  // JSON per foto
  
  // Note e osservazioni
  notes           String?
  
  // Validazione
  isValidated     Boolean  @default(false) // Se validato da operatore
  validatedBy     String?  // ID utente che ha validato
  validatedAt     DateTime?
  validatedByUser User?    @relation(fields: [validatedBy], references: [id], name: "DeliveryValidator")
  
  // Audit
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?  // ID utente che ha inserito
  createdByUser   User?    @relation(fields: [createdBy], references: [id], name: "DeliveryCreator")
  
  @@unique([date, contributorId, materialTypeId]) // Evita duplicati stesso giorno/conferitore/materiale
  
  // Indici per performance
  @@index([date])
  @@index([contributorId])
  @@index([materialTypeId])
  @@index([basinId])
}

// ================================
// GESTIONE LAVORAZIONI AVANZATA (NUOVA SEZIONE)
// ================================

model ProcessingSession {
  id              String   @id @default(uuid())
  date            DateTime // Data lavorazione
  shiftNumber     Int      // 1=primo turno, 2=secondo turno, 3=terzo turno
  
  // Operatore responsabile
  operatorId      String
  operator        User     @relation(fields: [operatorId], references: [id], name: "ProcessingSessionOperator")
  
  // Timing
  startTime       DateTime?
  endTime         DateTime?
  
  // Stato sessione
  status          String   @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, SUSPENDED, CANCELLED
  
  // Note generali
  notes           String?
  
  // Audit
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  
  // Relazioni
  inputs          ProcessingInput[]
  outputs         ProcessingOutput[]
  waste           ProcessingWaste[]
  
  @@unique([date, shiftNumber]) // Un solo turno per data
  @@index([date])
  @@index([operatorId])
}

model ProcessingInput {
  id                String   @id @default(uuid())
  processingSessionId String
  processingSession ProcessingSession @relation(fields: [processingSessionId], references: [id], onDelete: Cascade)
  
  // Materiale utilizzato
  materialTypeId    String
  materialType      MaterialType @relation(fields: [materialTypeId], references: [id], name: "ProcessingInputMaterial")
  
  // Origine materiale
  sourceType        String   // DELIVERY (da conferimento), STOCK (da giacenza)
  sourceId          String?  // ID del conferimento o movimento giacenza
  
  // Quantità
  quantityUsed      Float    // Quantità utilizzata
  unit              String   @default("kg")
  
  // Qualità materiale in ingresso
  qualityGrade      String?  // EXCELLENT, GOOD, POOR, CONTAMINATED
  moistureLevel     String?  // LOW, MEDIUM, HIGH
  contaminationPercent Float @default(0)
  
  // Note specifiche
  notes             String?
  
  // Audit
  createdAt         DateTime @default(now())
  
  @@index([processingSessionId])
  @@index([materialTypeId])
}

model ProcessingOutput {
  id                String   @id @default(uuid())
  processingSessionId String
  processingSession ProcessingSession @relation(fields: [processingSessionId], references: [id], onDelete: Cascade)
  
  // Materiale prodotto
  materialTypeId    String
  materialType      MaterialType @relation(fields: [materialTypeId], references: [id], name: "ProcessingOutputMaterial")
  
  // Quantità prodotta
  quantityProduced  Float    // Quantità prodotta
  unit              String   @default("kg")
  
  // Dettagli produzione
  qualityGrade      String   @default("GOOD") // EXCELLENT, GOOD, POOR
  packageCount      Int      @default(0) // Numero colli/balle
  packageType       String?  // Tipo imballaggio (balle, sacchi, etc.)
  
  // Stoccaggio
  storageLocation   String?  // Ubicazione stoccaggio
  batchNumber       String?  // Numero lotto
  
  // Note specifiche
  notes             String?
  
  // Audit
  createdAt         DateTime @default(now())
  
  @@index([processingSessionId])
  @@index([materialTypeId])
}

model ProcessingWaste {
  id                String   @id @default(uuid())
  processingSessionId String
  processingSession ProcessingSession @relation(fields: [processingSessionId], references: [id], onDelete: Cascade)
  
  // Tipo di scarto
  wasteTypeId       String
  wasteType         MaterialType @relation(fields: [wasteTypeId], references: [id], name: "ProcessingWasteMaterial")
  
  // Quantità
  quantity          Float    // Quantità scarto
  unit              String   @default("kg")
  
  // Gestione smaltimento
  disposalMethod    String?  // LANDFILL, INCINERATION, RECYCLING, OTHER
  disposalDestination String? // Destinazione smaltimento
  cerCode           String?  // Codice CER se applicabile
  
  // Note
  notes             String?
  
  // Audit
  createdAt         DateTime @default(now())
  
  @@index([processingSessionId])
  @@index([wasteTypeId])
}

// ================================
// GESTIONE GIACENZE (AGGIORNATO)
// ================================

model Inventory {
  id              String   @id @default(uuid())
  date            DateTime // Data di riferimento
  
  // Materiale
  materialType    String   // Tipo materiale (deprecato)
  reference       String   // COREPLA, CORIPET, etc.
  
  // Riferimento alla nuova tipologia (AGGIUNTO)
  materialTypeId  String?
  materialTypeRel MaterialType? @relation(fields: [materialTypeId], references: [id], name: "InventoryMaterialType")
  
  // Movimenti
  initialStock    Float    // Giacenza iniziale
  deliveries      Float    @default(0) // Ingressi del giorno
  processing      Float    @default(0) // Utilizzato in lavorazione
  shipments       Float    @default(0) // Uscite del giorno
  adjustments     Float    @default(0) // Variazioni/correzioni
  
  // Giacenza finale
  finalStock      Float    // Giacenza finale calcolata
  
  // Note
  notes           String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([date, materialType, reference, materialTypeId]) // AGGIORNATO per includere materialTypeId
  
  // Indici per performance
  @@index([date])
  @@index([materialType, reference])
  @@index([materialTypeId])
}

// ================================
// GESTIONE ANALISI MERCEOLOGICHE
// ================================

model MerceologicalAnalysis {
  id              String   @id @default(uuid())
  date            DateTime
  basinId         String
  basin           Basin    @relation(fields: [basinId], references: [id], name: "AnalysisBasin")
  flowType        String   // A, B, C, D
  
  // Percentuali rilevate
  foreignFractionPercentage  Float // Frazione estranea
  plasticPackagingPercentage Float // Imballaggi plastica totali
  cplPetPercentage          Float // CPL in PET
  otherCplPercentage        Float // Altri CPL
  trackersPercentage        Float // Traccianti
  variousPackagingPercentage Float // Imballaggi vari
  
  // Dettagli analisi
  sampleWeight    Float?   // Peso campione analizzato
  analysisMethod  String?  // Metodo utilizzato
  operator        String?  // Chi ha fatto l'analisi
  
  // Validità e note
  isValid         Boolean  @default(true)
  notes           String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Indici
  @@index([date])
  @@index([basinId, flowType])
}

// ================================
// MODELLO PROCESSING DEPRECATO (Da rimuovere in futuro)
// ================================

model Processing {
  id              String   @id @default(uuid())
  date            DateTime // Data lavorazione
  shift           String   // Turno: MORNING, AFTERNOON, NIGHT
  
  // Operatore responsabile
  operatorId      String?
  
  // Materiale in ingresso
  inputMaterialType String
  inputWeight     Float    // Peso materiale in ingresso
  inputReference  String   // COREPLA, CORIPET, etc.
  
  // Efficienza lavorazione
  efficiency      Float?   // Percentuale di resa
  wasteWeight     Float?   // Peso scarti prodotti
  
  // Note
  notes           String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relazioni
  outputs         ProcessingOutput_Old[]

  // Indici
  @@index([date, shift])
  @@index([operatorId])
}

model ProcessingOutput_Old {
  id              String   @id @default(uuid())
  processingId    String
  processing      Processing @relation(fields: [processingId], references: [id])
  
  // Prodotto ottenuto
  outputMaterialType String
  outputWeight    Float    // Peso prodotto
  outputReference String   // COREPLA, CORIPET, etc.
  quality         String?  // Qualità del prodotto
  
  createdAt       DateTime @default(now())
}