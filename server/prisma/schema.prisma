generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      String   @default("USER")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id            String   @id @default(uuid())
  name          String
  vatNumber     String   @unique
  address       String?
  city          String?
  zipCode       String?
  province      String?
  phone         String?
  email         String?
  pec           String?
  contractId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relazioni
  basins        Basin[]
  sentOrders    PickupOrder[] @relation("SenderOrders")
  receivedOrders PickupOrder[] @relation("RecipientOrders")
}

model Basin {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  flowType    String
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relazioni
  pickupOrders PickupOrder[]
}

model PickupOrder {
  id               String    @id @default(uuid())
  orderNumber      String    @unique
  issueDate        DateTime
  scheduledDate    DateTime?
  completionDate   DateTime?
  shipperId        String?
  senderId         String
  sender           Client    @relation(name: "SenderOrders", fields: [senderId], references: [id])
  recipientId      String
  recipient        Client    @relation(name: "RecipientOrders", fields: [recipientId], references: [id])
  basinId          String
  basin            Basin     @relation(fields: [basinId], references: [id])
  flowType         String
  distanceKm       Float?
  status           String    @default("PENDING") // PENDING, SCHEDULED, READY, COMPLETED, CANCELLED
  expectedQuantity Float?
  actualQuantity   Float?
  destinationQuantity Float?
  notes            String?
  documents        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}